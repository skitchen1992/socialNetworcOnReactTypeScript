{"version":3,"sources":["components/Dialogs/Dialogs.module.css","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsItem/DialogsItem.tsx","components/Dialogs/Massage/Message.tsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","DialogItem","path","id","className","classes","dialog","name","Message","message","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","button","Dialogs","dialogsPage","dialogsElement","dialogs","map","d","messagesElement","messages","m","dialogItems","values","sendMessage","newMessageBody","compose","dispatch","sendMessageCreator"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,OAAS,wBAAwB,SAAW,4B,iFCO3FC,EAAkB,SAACC,GACrB,MAAM,CACFC,OAAQD,EAAME,KAAKD,SAmBZE,IAfR,SAA6BC,GAYhC,OAAOC,YAAQN,EAARM,EAVuB,SAACC,GAAgC,IACtDL,EAAuBK,EAAvBL,OAAUM,EAD2C,YAC9BD,EAD8B,YAE1D,OAAKL,EAIE,cAACG,EAAD,eAAeG,IAHX,cAAC,IAAD,CAAUC,GAAI,gB,6FCVpBC,EAAa,SAACH,GACvB,IAAII,EAAI,mBAAeJ,EAAMK,IAC7B,OACI,qBAAKC,UAAWC,IAAQC,OAAxB,SACI,cAAC,IAAD,CAASN,GAAIE,EAAb,SAAoBJ,EAAMS,UCLzBC,EAA8B,SAACV,GACxC,OACI,qBAAKM,UAAWC,IAAQI,QAAxB,SAAkCX,EAAMW,W,yCCA1CC,EAAcC,YAAiB,IAcxBC,EAAsBC,YAAwB,CAACC,KAAM,wBAA/BD,EAbsC,SAACf,GACtE,OACI,mCACI,uBAAMiB,SAAUjB,EAAMkB,aAAtB,UACI,cAACC,EAAA,EAAD,CAAOC,UAAWC,IAAUC,SAAU,CAACC,IAAUX,GAAcH,KAAK,iBAC7De,YAAY,sGACnB,8BACI,wBAAQlB,UAAWC,IAAQkB,OAA3B,4BCiBLC,MA3Bf,SAAiB1B,GACb,IAAIN,EAAQM,EAAM2B,YAEdC,EAAiBlC,EAAMmC,QAAQC,KAAI,SAAAC,GACnC,OAAO,cAAC,EAAD,CAAYtB,KAAMsB,EAAEtB,KAAMJ,GAAI0B,EAAE1B,IAAS0B,EAAE1B,OAElD2B,EAAkBtC,EAAMuC,SAASH,KAAI,SAAAI,GACrC,OAAO,cAAC,EAAD,CAASvB,QAASuB,EAAEvB,QAASN,GAAI6B,EAAE7B,IAAS6B,EAAE7B,OAKzD,OACI,gCACI,sBAAKC,UAAWC,IAAQsB,QAAxB,UACI,qBAAKvB,UAAWC,IAAQ4B,YAAxB,SACKP,IAEL,qBAAKtB,UAAWC,IAAQ0B,SAAxB,SACKD,OAGT,cAAClB,EAAD,CAAqBG,SAbT,SAACmB,GACjBpC,EAAMqC,YAAYD,EAAOE,uB,gBCclBC,sBACXxC,aAhBkB,SAACL,GACnB,MAAO,CACHiC,YAAajC,EAAMiC,YACnBhC,OAAQD,EAAME,KAAKD,WAGF,SAAC6C,GACtB,MAAO,CACHH,YAAa,SAACC,GACVE,EAASC,YAAmBH,SAQpCzC,IAFW0C,CAGbb","file":"static/js/4.af859c54.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"dialog\":\"Dialogs_dialog__lk_cw\",\"messages\":\"Dialogs_messages__1w_Up\"};","import React, {ComponentType} from 'react';\nimport {Redirect} from \"react-router\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../redux/redux-store\";\n\ntype mapStateToPropsType = {\n    isAuth:boolean\n}\nconst mapStateToProps = (state:AppStateType ):mapStateToPropsType =>{\n    return{\n        isAuth: state.auth.isAuth\n    }\n}\n\nexport function withAuthRedirect<T>(Component:ComponentType<T>){\n\n    const AuthRedirectComponent = (props:mapStateToPropsType ) => {\n        let {isAuth,...restProps} = props\n        if (!isAuth) {\n            return <Redirect to={\"/login\"}/>\n\n        }\n        return <Component {...restProps as T}/>\n\n    }\n\n    return connect(mapStateToProps)(AuthRedirectComponent);\n};\n\nexport default withAuthRedirect;","import classes from \"../Dialogs.module.css\";\nimport {NavLink} from \"react-router-dom\";\n\n\ntype DialogItemType={\n    name:string\n    id:string,\n}\n\nexport const DialogItem = (props:DialogItemType)=>{\n    let path = `/dialogs/${props.id}`\n    return(\n        <div className={classes.dialog}>\n            <NavLink to={path}>{props.name}</NavLink>\n        </div>\n    )\n}","import classes from \"../Dialogs.module.css\";\n\n\ntype MessageType={\n    message:string\n    id:string,\n}\n\nexport const Message:React.FC<MessageType>=(props)=>{\n    return(\n        <div className={classes.message}>{props.message}</div>\n    )\n}","import React from \"react\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\nimport classes from \"../Dialogs.module.css\";\n\nexport type FormDataType = {\n    newMessageBody: string\n\n}\nconst maxLength50 = maxLengthCreator(50)\nexport const AddMessageForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\n    return (\n        <>\n            <form onSubmit={props.handleSubmit}>\n                <Field component={Textarea} validate={[required, maxLength50]} name=\"newMessageBody\"\n                       placeholder=\"Ввидите сообщение\"/>\n                <div>\n                    <button className={classes.button}>Send</button>\n                </div>\n            </form>\n        </>\n    )\n}\nexport const AddMessageFormRedux = reduxForm<FormDataType>({form: \"dialogAddMessageForm\"})(AddMessageForm)","import classes from './Dialogs.module.css';\nimport {DialogItem} from \"./DialogsItem/DialogsItem\";\nimport {Message} from \"./Massage/Message\";\nimport React from \"react\";\nimport {DialogsPropsType} from \"./DialogsContainer\";\nimport {AddMessageFormRedux, FormDataType} from \"./AddMessageForm/AddMessageForm\";\n\n\nfunction Dialogs(props: DialogsPropsType) {\n    let state = props.dialogsPage\n\n    let dialogsElement = state.dialogs.map(d => {\n        return <DialogItem name={d.name} id={d.id} key={d.id}/>\n    })\n    let messagesElement = state.messages.map(m => {\n        return <Message message={m.message} id={m.id} key={m.id}/>\n    })\n    const addNewMessage=(values:FormDataType)=>{\n        props.sendMessage(values.newMessageBody)\n    }\n    return (\n        <div>\n            <div className={classes.dialogs}>\n                <div className={classes.dialogItems}>\n                    {dialogsElement}\n                </div>\n                <div className={classes.messages}>\n                    {messagesElement}\n                </div>\n            </div>\n            <AddMessageFormRedux onSubmit={addNewMessage} />\n        </div>\n    )\n}\n\nexport default Dialogs;","import {InitialStateType, sendMessageCreator} from \"../../redux/dialogs-reducer\";\nimport {connect} from \"react-redux\";\nimport Dialogs from \"./Dialogs\";\nimport {AppStateType} from \"../../redux/redux-store\";\nimport {compose, Dispatch} from \"redux\";\nimport withAuthRedirect from \"../../hoc/withAuthRedirect\";\n\ntype MapStateToPropsType = {\n    dialogsPage: InitialStateType\n    isAuth:boolean\n}\ntype MapDispatchToPropsType = {\n    sendMessage: (newMessageBody:string) => void\n}\n\nexport type DialogsPropsType = MapStateToPropsType & MapDispatchToPropsType\n\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\n    return {\n        dialogsPage: state.dialogsPage,\n        isAuth: state.auth.isAuth\n    }\n}\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\n    return {\n        sendMessage: (newMessageBody:string) => {\n            dispatch(sendMessageCreator(newMessageBody))\n        }\n    }\n}\n\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, mapDispatchToProps),\n    withAuthRedirect\n)(Dialogs)"],"sourceRoot":""}
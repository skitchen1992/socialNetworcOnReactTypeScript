{"version":3,"sources":["components/Dialogs/Dialogs.module.css","hoc/withAuthRedirect.tsx","../node_modules/@material-ui/core/esm/Card/Card.js","../node_modules/@material-ui/core/esm/CardContent/CardContent.js","components/Dialogs/DialogsItem/DialogsItem.tsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","Card","React","ref","classes","className","_props$raised","raised","other","_objectWithoutProperties","Paper","_extends","clsx","root","elevation","withStyles","overflow","name","CardContent","_props$component","component","padding","paddingBottom","DialogItem","path","id","dialog","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","wrap","onSubmit","handleSubmit","Field","Textarea","validate","required","placeholder","wrapButton","button","useStyles","makeStyles","minWidth","margin","bullet","display","transform","title","fontSize","pos","marginBottom","Dialogs","dialogsPage","messagesElement","dialogs","map","d","messages","m","Typography","color","gutterBottom","variant","message","s","wrapper","values","sendMessage","newMessageBody","compose","dispatch","sendMessageCreator"],"mappings":"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","file":"static/js/4.cc349501.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Dialogs_wrapper__1cRA8\",\"button\":\"Dialogs_button__UnW0m\",\"wrap\":\"Dialogs_wrap__3fA78\",\"wrapButton\":\"Dialogs_wrapButton__3lW_t\"};","import React, {ComponentType} from 'react';\nimport {Redirect} from \"react-router\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../redux/redux-store\";\n\ntype mapStateToPropsType = {\n    isAuth:boolean\n}\nconst mapStateToProps = (state:AppStateType ):mapStateToPropsType =>{\n    return{\n        isAuth: state.auth.isAuth\n    }\n}\n\nexport function withAuthRedirect<T>(Component:ComponentType<T>){\n\n    const AuthRedirectComponent = (props:mapStateToPropsType ) => {\n        let {isAuth,...restProps} = props\n        if (!isAuth) {\n            return <Redirect to={\"/login\"}/>\n\n        }\n        return <Component {...restProps as T}/>\n\n    }\n\n    return connect(mapStateToProps)(AuthRedirectComponent);\n};\n\nexport default withAuthRedirect;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport Paper from '../Paper';\nimport withStyles from '../styles/withStyles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    overflow: 'hidden'\n  }\n};\nvar Card = /*#__PURE__*/React.forwardRef(function Card(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$raised = props.raised,\n      raised = _props$raised === void 0 ? false : _props$raised,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"raised\"]);\n\n  return /*#__PURE__*/React.createElement(Paper, _extends({\n    className: clsx(classes.root, className),\n    elevation: raised ? 8 : 1,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Card.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\r\n   * The content of the component.\r\n   */\n  children: PropTypes.node,\n\n  /**\r\n   * Override or extend the styles applied to the component.\r\n   * See [CSS API](#css) below for more details.\r\n   */\n  classes: PropTypes.object,\n\n  /**\r\n   * @ignore\r\n   */\n  className: PropTypes.string,\n\n  /**\r\n   * If `true`, the card will use raised styling.\r\n   */\n  raised: PropTypes.bool\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCard'\n})(Card);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    padding: 16,\n    '&:last-child': {\n      paddingBottom: 24\n    }\n  }\n};\nvar CardContent = /*#__PURE__*/React.forwardRef(function CardContent(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"component\"]);\n\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardContent.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\r\n   * The content of the component.\r\n   */\n  children: PropTypes.node,\n\n  /**\r\n   * Override or extend the styles applied to the component.\r\n   * See [CSS API](#css) below for more details.\r\n   */\n  classes: PropTypes.object,\n\n  /**\r\n   * @ignore\r\n   */\n  className: PropTypes.string,\n\n  /**\r\n   * The component used for the root node.\r\n   * Either a string to use a HTML element or a component.\r\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCardContent'\n})(CardContent);","import classes from \"../Dialogs.module.css\";\nimport {NavLink} from \"react-router-dom\";\n\n\ntype DialogItemType={\n    name:string\n    id:string,\n}\n\nexport const DialogItem = (props:DialogItemType)=>{\n    let path = `/dialogs/${props.id}`\n    return(\n        <div className={classes.dialog}>\n            <NavLink to={path}>{props.name}</NavLink>\n        </div>\n    )\n}","import React from \"react\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\nimport classes from \"../Dialogs.module.css\";\n\nexport type FormDataType = {\n    newMessageBody: string\n\n}\nconst maxLength50 = maxLengthCreator(50)\nexport const AddMessageForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\n    return (\n        <div className={classes.wrap} >\n            <form onSubmit={props.handleSubmit}>\n                <Field component={Textarea} validate={[required, maxLength50]} name=\"newMessageBody\"\n                       placeholder=\"Message...\"/>\n                <div className={classes.wrapButton}>\n                    <button className={classes.button}>Send</button>\n                </div>\n\n            </form>\n\n        </div>\n    )\n}\nexport const AddMessageFormRedux = reduxForm<FormDataType>({form: \"dialogAddMessageForm\"})(AddMessageForm)","import s from './Dialogs.module.css';\nimport {DialogItem} from \"./DialogsItem/DialogsItem\";\nimport React from \"react\";\nimport {DialogsPropsType} from \"./DialogsContainer\";\nimport {AddMessageFormRedux, FormDataType} from \"./AddMessageForm/AddMessageForm\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from '@material-ui/core/styles';\n\n\n\n\nconst useStyles = makeStyles({\n    root: {\n        minWidth: 275,\n        margin: 10,\n    },\n    bullet: {\n        display: 'inline-block',\n        margin: '0 2px',\n        transform: 'scale(0.8)',\n    },\n    title: {\n        fontSize: 14,\n    },\n    pos: {\n        marginBottom: 12,\n    },\n});\nfunction Dialogs(props: DialogsPropsType) {\n    const classes = useStyles();\n    let state = props.dialogsPage\n\n    let dialogsElement = state.dialogs.map(d => {\n        return <DialogItem name={d.name} id={d.id} key={d.id}/>\n    })\n    let messagesElement = state.messages.map(m => {\n        return   (\n            <Card className={classes.root}>\n            <CardContent>\n                <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n                    You message\n                </Typography>\n\n                <Typography variant=\"body2\" component=\"p\">\n                    {m.message}\n                    <br />\n\n                </Typography>\n            </CardContent>\n        </Card>)\n    })\n    const addNewMessage=(values:FormDataType)=>{\n        props.sendMessage(values.newMessageBody)\n    }\n    return (\n        <div className={s.wrapper}>\n            <div className={s.dialogs}>\n                {messagesElement}\n            </div>\n            <AddMessageFormRedux onSubmit={addNewMessage} />\n        </div>\n    )\n}\n\nexport default Dialogs;","import {InitialStateType, sendMessageCreator} from \"../../redux/dialogs-reducer\";\nimport {connect} from \"react-redux\";\nimport Dialogs from \"./Dialogs\";\nimport {AppStateType} from \"../../redux/redux-store\";\nimport {compose, Dispatch} from \"redux\";\nimport withAuthRedirect from \"../../hoc/withAuthRedirect\";\n\ntype MapStateToPropsType = {\n    dialogsPage: InitialStateType\n    isAuth:boolean\n}\ntype MapDispatchToPropsType = {\n    sendMessage: (newMessageBody:string) => void\n}\n\nexport type DialogsPropsType = MapStateToPropsType & MapDispatchToPropsType\n\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\n    return {\n        dialogsPage: state.dialogsPage,\n        isAuth: state.auth.isAuth\n    }\n}\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\n    return {\n        sendMessage: (newMessageBody:string) => {\n            dispatch(sendMessageCreator(newMessageBody))\n        }\n    }\n}\n\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, mapDispatchToProps),\n    withAuthRedirect\n)(Dialogs)"],"sourceRoot":""}
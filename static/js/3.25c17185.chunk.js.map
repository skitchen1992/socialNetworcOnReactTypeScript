{"version":3,"sources":["hoc/withAuthRedirect.tsx","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","module","exports","ProfileStatusHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onChange","e","currentTarget","value","onBlur","updateUserStatus","autoFocus","onDoubleClick","ProfileData","className","classes","about","name","profile","fullName","Object","keys","contacts","map","key","contactTitle","contactValue","Contact","ProfileInfo","img1","userInfo","logo","img","src","photos","large","userPhoto","isOwner","target","files","length","savePhoto","type","Preloader","Post","message","likesCount","MyPosts","React","memo","postsElements","profilePage","posts","el","id","myPosts","AddNewPostFormRedux","onSubmit","values","addPost","newPostText","maxLength10","maxLengthCreator","reduxForm","form","handleSubmit","Field","component","Textarea","placeholder","validate","required","button","MyPostsContainer","dispatch","addPostActionCreator","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getUserStatus","refreshProfile","prevProps","prevState","snapshot","compose","withRouter"],"mappings":"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","file":"static/js/3.25c17185.chunk.js","sourcesContent":["import React, {ComponentType} from 'react';\nimport {Redirect} from \"react-router\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../redux/redux-store\";\n\ntype mapStateToPropsType = {\n    isAuth:boolean\n}\nconst mapStateToProps = (state:AppStateType ):mapStateToPropsType =>{\n    return{\n        isAuth: state.auth.isAuth\n    }\n}\n\nexport function withAuthRedirect<T>(Component:ComponentType<T>){\n\n    const AuthRedirectComponent = (props:mapStateToPropsType ) => {\n        let {isAuth,...restProps} = props\n        if (!isAuth) {\n            return <Redirect to={\"/login\"}/>\n\n        }\n        return <Component {...restProps as T}/>\n\n    }\n\n    return connect(mapStateToProps)(AuthRedirectComponent);\n};\n\nexport default withAuthRedirect;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"img1\":\"ProfileInfo_img1__2Mwvh\",\"userInfo\":\"ProfileInfo_userInfo__3hlxg\",\"img\":\"ProfileInfo_img__1lpBU\",\"about\":\"ProfileInfo_about__ogyhT\",\"logo\":\"ProfileInfo_logo__2_ojy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__A0EJd\",\"post__circle\":\"Post_post__circle__3iTOx\"};","import React, {useEffect, useState} from \"react\";\n\n\ntype ProfileStatusType = {\n    status: string\n    updateUserStatus: (status: string) => void\n}\n\nexport const ProfileStatusHooks = (props: ProfileStatusType) => {\n    const [editMode, setEditMode] = useState<boolean>(false)\n    const [status, setStatus] = useState<string>(props.status)\n    useEffect(()=>{\n        setStatus(props.status)\n    },[props.status])\n\n    const activateEditMode = () => {\n        setEditMode(true)\n    }\n    const onStatusChange = (e:any) => {\n        setStatus(e.currentTarget.value)\n    }\n    const deactivateEditMode = () => {\n        setEditMode(false)\n        props.updateUserStatus(status)\n    }\n    return (\n        <div><span>Status: </span>\n            {editMode\n                ? <input onChange={onStatusChange} onBlur={deactivateEditMode}\n                         value={status} autoFocus/>\n                : <span onDoubleClick={activateEditMode}>{status || \"Нет статуса\"}</span>}\n        </div>\n    )\n}\n\nconst Contact = (props:any)=>{\n    return\n}\n\n","import classes from './ProfileInfo.module.css';\nimport Preloader from \"../../common/Preloader/Preloader\";\nimport {ProfileStatusHooks} from \"./ProfileStatusHooks\";\nimport userPhoto from \"../../../assets/images/2.png\";\nimport React, {ChangeEvent, useState, WeakValidationMap} from \"react\";\nimport {createField, Input} from \"../../common/FormsControls/FormsControls\";\nimport {Contacts, ProfileType} from \"../../../redux/profile-reducer\";\nimport {reduxForm} from \"redux-form\";\n\ntype ProfileInfoType = {\n    profile: ProfileType | null\n    status: string\n    updateUserStatus: (status: string) => void\n    isOwner: boolean\n    savePhoto: (file: File) => void\n}\n\nfunction ProfileInfo(props: ProfileInfoType) {\n    if (!props.profile) {\n        return <Preloader/>\n    }\n    const mainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\n        if (e?.target?.files?.length) {\n            props.savePhoto(e.target.files[0])\n        }\n    }\n    return !props.profile ? null : (\n        <div>\n            <div className={classes.img1}></div>\n            <div className={classes.userInfo}>\n                <div className={classes.logo}>\n                    <img className={classes.img} src={props.profile.photos.large || userPhoto}></img>\n                    {props.isOwner && <input onChange={mainPhotoSelected} type={\"file\"}/>}\n                </div>\n                <ProfileData profile={props.profile} status={props.status}\n                             updateUserStatus={props.updateUserStatus}\n                             isOwner={props.isOwner}\n\n                />\n\n            </div>\n        </div>\n    )\n}\n\ntype ProfileDataType = {\n    profile: any\n    status: string\n    updateUserStatus: (status: string) => void\n    isOwner?: boolean\n}\nconst ProfileData = (props: ProfileDataType) => {\n    return (\n        <div className={classes.about}>\n            <div className={classes.name}><span>Name: </span>{props.profile.fullName}</div>\n            <ProfileStatusHooks status={props.status} updateUserStatus={props.updateUserStatus}/>\n            <div>\n                <span>Contact: </span>{Object.keys(props.profile.contacts).map((key: string) => {\n                return <Contact contactTitle={key} contactValue={props.profile.contacts[key] as any}/>\n            })}\n            </div>\n        </div>\n    )\n}\n\ntype ContactType = {\n    contactTitle: any\n    contactValue: string\n}\nconst Contact = (props: ContactType) => {\n    return (\n        <div>\n            <span>{props.contactTitle}</span>:<span>{props.contactValue}</span>\n        </div>\n    )\n}\n\nexport default ProfileInfo;\n{/*                    <p>Date of Birth:<span>2 january</span></p>\n                    <p>City:<span>Moscow</span></p>\n                    <p>Education:<span>BSU 11</span></p>\n                    <p>WEB\n                        Site:<span>{props.profile.contacts.website != null ? props.profile.contacts.website : \" Сайта нет\"}</span>\n                    </p>*/\n}","import './Post.module.css';\n\n\ntype PostType = {\n    id:string ,\n    message:string,\n    likesCount:number,\n}\nfunction Post(props: PostType ){\n\n    return(\n        <div>\n            <div className=\"post\">\n                <div className=\"post__circle\"/>\n                <p>{props.message}</p>\n            </div>\n            <div>Like{props.likesCount}</div>\n        </div>\n    )\n}\nexport default Post;","import classes from './MyPosts.module.css';\nimport Post from './Post/Post';\nimport React from \"react\";\nimport {MyPostsPropsType} from \"./MyPostsContainer\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\n\n\nconst MyPosts = React.memo(function MyPosts(props: MyPostsPropsType) {\n    let postsElements = props.profilePage.posts.map((el) =>\n        <Post id={el.id} message={el.message} likesCount={el.likesCount} key={el.id}/>)\n\n    let onAddPost = (values: FormDataType) => {\n        props.addPost(values.newPostText)\n    }\n    return (\n        <div>\n            <div className={classes.posts}>\n                <div className={classes.myPosts}>My posts</div>\n                <AddNewPostFormRedux onSubmit={onAddPost}/>\n            </div>\n            {postsElements}\n        </div>\n    )\n})\n\ntype FormDataType = {\n    newPostText: string\n}\nconst maxLength10 = maxLengthCreator(10)\nconst AddNewPostForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <Field name={\"newPostText\"}\n                   component={Textarea}\n                   placeholder=\"Ввидите сообщение\"\n                   validate={[required, maxLength10]}/>\n            <div>\n                <button className={classes.button}>Add Post</button>\n            </div>\n\n        </form>\n    )\n}\nconst AddNewPostFormRedux = reduxForm<FormDataType>({form: 'profileAddNewPostForm'})(AddNewPostForm)\n\nexport default MyPosts;","import {addPostActionCreator} from \"../../../redux/profile-reducer\";\nimport React from \"react\";\nimport {Dispatch} from \"redux\";\nimport {connect} from \"react-redux\";\nimport MyPosts from \"./MyPosts\";\nimport {ProfileStateType} from \"../../../redux/profile-reducer\";\nimport {AppStateType} from \"../../../redux/redux-store\";\n\ntype MapStateToPropsType = {\n    profilePage: ProfileStateType\n}\ntype MapDispatchToPropsType = {\n    addPost:(newPostText:string)=>void\n}\n\nexport type MyPostsPropsType = MapStateToPropsType & MapDispatchToPropsType\n\nconst mapStateToProps = (state:AppStateType):MapStateToPropsType =>{\n    return{\n        profilePage:state.profilePage,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch)=>{\n    return {\n        addPost:(newPostText:string)=>{\n            dispatch(addPostActionCreator(newPostText))\n        }\n    }\n}\n\n\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)","import './Profile.css';\n\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\n\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\n\nimport React from \"react\";\nimport {ProfileType} from \"../../redux/profile-reducer\";\n\ntype ProfileTypeProps = {\n    profile: ProfileType | null\n    status:string\n    updateUserStatus:(status:string)=>void\n    isOwner:boolean\n    savePhoto:(file: File)=>void\n}\n\n\nfunction Profile(props:ProfileTypeProps) {\n\n    return (\n        <div>\n            <ProfileInfo profile={props.profile}\n                         isOwner={props.isOwner}\n                         status={props.status}\n                         updateUserStatus={props.updateUserStatus}\n                         savePhoto={props.savePhoto}\n            />\n            <MyPostsContainer/>\n        </div>\n    )\n}\n\nexport default Profile;","import './Profile.css';\nimport React from \"react\";\nimport Profile from \"./Profile\";\nimport {getUserProfile, getUserStatus, ProfileType, savePhoto, updateUserStatus} from \"../../redux/profile-reducer\";\nimport {connect} from \"react-redux\";\nimport {RouteComponentProps, withRouter} from \"react-router\";\nimport {AppStateType} from \"../../redux/redux-store\";\nimport withAuthRedirect from \"../../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\n\ntype mapStateToPropsType = {\n    profile: ProfileType | null\n    status: string\n    authorizedUserId: string | null\n    isAuth: boolean\n}\n\ninterface MatchParams {\n    userId: string;\n}\n\ntype ProfileContainerPropsType = RouteComponentProps<MatchParams> & {\n    profile: ProfileType | null\n    getUserProfile: (userId: number) => void\n    getUserStatus: (userId: number) => void\n    updateUserStatus: (status: string) => void\n    isAuth: boolean\n    status: string\n    authorizedUserId: string | null\n    savePhoto:(file: File)=>void\n}\n\nclass ProfileContainer extends React.Component<ProfileContainerPropsType> {\n    refreshProfile(){\n        let userId = this.props.match.params.userId\n        if (!userId) {\n            userId = this.props.authorizedUserId!\n            if(!userId){\n                this.props.history.push(\"/login\")\n            }\n        }\n        this.props.getUserProfile(+userId)\n        this.props.getUserStatus(+userId)\n    }\n    componentDidMount() {\n        this.refreshProfile()\n    }\n    componentDidUpdate(prevProps: Readonly<ProfileContainerPropsType>, prevState: Readonly<{}>, snapshot?: any) {\n       if(this.props.match.params.userId !== prevProps.match.params.userId)\n        this.refreshProfile()\n    }\n\n\n    render() {\n        return (\n            <div>\n                <Profile //{...this.props}\n                        isOwner={!this.props.match.params.userId}\n                        profile={this.props.profile}\n                        status={this.props.status}\n                        updateUserStatus={this.props.updateUserStatus}\n                        savePhoto={this.props.savePhoto}\n                />\n            </div>\n        )\n    }\n\n\n}\n\nlet mapStateToProps = (state: AppStateType): mapStateToPropsType => ({\n    profile: state.profilePage.profile,\n    status: state.profilePage.status,\n    authorizedUserId: state.auth.id,\n    isAuth: state.auth.isAuth\n\n\n})\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, {getUserProfile, getUserStatus, updateUserStatus, savePhoto}),\n    withRouter,\n    withAuthRedirect,\n)(ProfileContainer)\n\n\n\n\n\n"],"sourceRoot":""}